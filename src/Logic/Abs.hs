-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language logic.

module Logic.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Arg
    = ArgRange Integer Integer
    | ArgLine Integer
    | ArgTerm Term
    | ArgForm Term Form
    | ArgNil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormPar Form
    | FormBot
    | FormEq Term Term
    | FormPred Pred
    | FormAll Ident Form
    | FormSome Ident Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormImpl Form Form
    | FormNil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = Pred0 Ident | PredN Ident [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = Term0 Ident | TermN Ident [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Label = LabelLine Integer | LabelRange Integer Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

