-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language logic.

module Logic.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Sequent = Seq [Form] Form [Step]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepPrem [Label] Form
    | StepDecConst [Label] Ident
    | StepDecVar [Label] Ident
    | StepDecFun [Label] Ident [Ident]
    | StepAssume [Label] Form
    | StepProof [Label] [Step]
    | StepForm [Label] Ident [Arg] Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ArgRange Integer Integer | ArgSub Step | ArgLit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormBot
    | FormEq Term Term
    | FormPred Pred
    | FormAll Ident Form
    | FormSome Ident Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormIf Form Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = Pred Ident Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = Term Ident Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Params = Params [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Label = Label Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Nil = Nil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

params :: Nil -> Params
params = \ n -> Params []

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

