-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language logic.

module Logic.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Sequent = Seq [Form] Form Proof
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Proof = Proof [ProofElem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProofElem = ProofElem [Label] Step
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepPrem Form
    | StepDecConst Ident
    | StepDecVar Ident
    | StepDecFun Ident [Ident]
    | StepAssume Form
    | StepProof Proof
    | StepForm Ident [Arg] Form
    | StepNil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg
    = ArgRange Integer Integer | ArgLine Integer | ArgTerm Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormPar Form
    | FormBot
    | FormEq Term Term
    | FormPred Pred
    | FormAll Ident Form
    | FormSome Ident Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormImpl Form Form
    | FormNil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = Pred Ident Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = Term Ident Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Params = Params [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Label = LabelLine Integer | LabelRange Integer Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Nil = Nil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

params :: Nil -> Params
params = \ n -> Params []

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

