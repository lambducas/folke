--Grammar for logic
Seq. Sequent ::= "if" [Form] "|-" Form "{" [Step] "}";

-- var form;
-- const form;

rules TermType ::= "var" | "const";

StepPrem.   Step ::= "prem" Form ";"; -- OK
StepTerm.   Step ::= TermType Term ";"; -- TODO: FIX
-- StepTerm.   Step ::= Term "Assumed" ";";  
StepAssume. Step ::= "assume" Form ";"; -- OK
StepScope.  Step ::= "{"[Step]"}"; 
StepForm.   Step ::= RuleId "[" [Arg] "]" Form ";";
terminator  Step "" ;

--var x
--const x
ArgStep. Arg ::= Step;
ArgLit. Arg ::= Integer;
separator Arg ",";

-- Add rules for every symbol
rules SymBot ::= "bot" | "somesymbol";

FormBot.  Form4  ::= SymBot;
FormEq.   Form4  ::= Term "=" Term;

FormAll.  Form3 ::= "all" Term Form;
FormSome. Form3 ::= "some" Term Form;
FormNot.  Form3 ::= "!" Form;

FormAnd.  Form2 ::= Form "&" Form;
FormOr.   Form2 ::= Form "|" Form;

FormIf.   Form1 ::= Form "->" Form;

FormPred. Form ::= Pred;
coercions Form 4;
separator Form ",";

Pred0. Pred ::= PredId;
PredN. Pred ::= PredId "(" [Term] ")";

TermVar. Term ::= TermId;
TermFun. Term ::= TermId "(" [Term] ")";
separator nonempty Term ",";

token PredId (upper (letter | digit | '_' )*);
token TermId (lower (letter | digit | '_' )*);
token RuleId (upper (letter | digit | '_' )*);

comment "#" ;