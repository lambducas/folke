-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language logic.

module Logic.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Sequent = Seq [Form] Form [Step]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepPrem Form
    | StepDecConst TermId
    | StepDecVar TermId
    | StepDecFun TermId [TermId]
    | StepAssume Form
    | StepProof [Step]
    | StepForm RuleId [Arg] Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ArgSub Step | ArgLit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormBot
    | FormEq Term Term
    | FormPred Pred
    | FormAll TermId Form
    | FormSome TermId Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormIf Form Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = Pred PredId Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = Term TermId Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Params = Params [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Nil = Nil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

params :: Nil -> Params
params = \ n -> Params []

newtype PredId = PredId ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype TermId = TermId ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype RuleId = RuleId ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition PredId where
  hasPosition (PredId (p, _)) = C.Just p

instance HasPosition TermId where
  hasPosition (TermId (p, _)) = C.Just p

instance HasPosition RuleId where
  hasPosition (RuleId (p, _)) = C.Just p

