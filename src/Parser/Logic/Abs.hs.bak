-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language logic.

module Logic.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Sequent = Seq [Form] Form [Step]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TermType = TermType_var | TermType_const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepPrem Form
    | StepTerm TermType TermId
    | StepAssume Form
    | StepScope [Step]
    | StepForm RuleId [Arg] Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ArgStep Step | ArgLit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SymBot = SymBot_bot | SymBot_somesymbol
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormBot SymBot
    | FormEq Term Term
    | FormPred Pred
    | FormAll TermId Form
    | FormSome TermId Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormIf Form Form
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = Pred0 PredId | PredN PredId [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = TermVar TermId | TermFun TermId [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PredId = PredId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TermId = TermId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype RuleId = RuleId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

