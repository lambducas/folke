-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Logic.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Logic.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transPredId :: Logic.Abs.PredId -> Result
transPredId x = case x of
  Logic.Abs.PredId string -> failure x

transTermId :: Logic.Abs.TermId -> Result
transTermId x = case x of
  Logic.Abs.TermId string -> failure x

transRuleId :: Logic.Abs.RuleId -> Result
transRuleId x = case x of
  Logic.Abs.RuleId string -> failure x

transSequent :: Logic.Abs.Sequent -> Result
transSequent x = case x of
  Logic.Abs.Seq forms form steps -> failure x

transTermType :: Logic.Abs.TermType -> Result
transTermType x = case x of
  Logic.Abs.TermType_var -> failure x
  Logic.Abs.TermType_const -> failure x

transStep :: Logic.Abs.Step -> Result
transStep x = case x of
  Logic.Abs.StepPrem form -> failure x
  Logic.Abs.StepTerm termtype termid -> failure x
  Logic.Abs.StepAssume form -> failure x
  Logic.Abs.StepScope steps -> failure x
  Logic.Abs.StepForm ruleid args form -> failure x

transArg :: Logic.Abs.Arg -> Result
transArg x = case x of
  Logic.Abs.ArgStep step -> failure x
  Logic.Abs.ArgLit integer -> failure x

transSymBot :: Logic.Abs.SymBot -> Result
transSymBot x = case x of
  Logic.Abs.SymBot_bot -> failure x
  Logic.Abs.SymBot_somesymbol -> failure x

transForm :: Logic.Abs.Form -> Result
transForm x = case x of
  Logic.Abs.FormBot symbot -> failure x
  Logic.Abs.FormEq term1 term2 -> failure x
  Logic.Abs.FormPred pred -> failure x
  Logic.Abs.FormAll termid form -> failure x
  Logic.Abs.FormSome termid form -> failure x
  Logic.Abs.FormNot form -> failure x
  Logic.Abs.FormAnd form1 form2 -> failure x
  Logic.Abs.FormOr form1 form2 -> failure x
  Logic.Abs.FormIf form1 form2 -> failure x

transPred :: Logic.Abs.Pred -> Result
transPred x = case x of
  Logic.Abs.Pred0 predid -> failure x
  Logic.Abs.PredN predid terms -> failure x

transTerm :: Logic.Abs.Term -> Result
transTerm x = case x of
  Logic.Abs.TermVar termid -> failure x
  Logic.Abs.TermFun termid terms -> failure x
