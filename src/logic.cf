--Grammar for logic
entrypoints Sequent;

Seq. Sequent ::= [Form] "|-" Form "{" [Step] "}";

-- var form;
-- const form;

StepPrem.       Step ::= [Label] "prem" Form ";";
StepDecConst.   Step ::= [Label] "const" Ident ";";
StepDecVar.     Step ::= [Label] "var" Ident";";
StepDecFun.     Step ::= [Label] Ident "(" [Ident] ")" ";";
StepAssume.     Step ::= [Label] "assume" Form ";"; --"Isn't premise and assume same only for proof/subproof?"
StepProof.      Step ::= [Label] "{" [Step] "}"; 
StepForm.       Step ::= [Label]  Ident "[" [Arg] "]" Form ";";
terminator      Step "" ;

ArgLit.   Arg   ::= Integer;
separator Arg   ",";

FormBot.  Form4 ::= "bot";
FormEq.   Form4 ::= Term "=" Term;
FormPred. Form4 ::= Pred;

FormAll.  Form3 ::= "all" Ident Form3;
FormSome. Form3 ::= "some" Ident Form3;
FormNot.  Form3 ::= "!" Form3;

FormAnd.  Form2 ::= Form2 "&" Form3; --left-associative(c convention)
FormOr.   Form2 ::= Form2 "|" Form3; --left-associative(c convention)

FormIf.   Form1 ::= Form2 "->" Form1; --right-associative(book)
coercions Form 4;
separator Form ",";

Pred. Pred ::= Ident Params;
Term. Term ::= Ident Params;

Params. Params ::= "(" [Term] ")";
params. Params ::= Nil;

define params n = Params [];

Label.     Label ::= Integer ":";
separator  Label "";

--Ugly but works?
Nil. Nil ::= "";

separator nonempty Term ",";
separator nonempty Ident ",";

comment "#";