-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language logic.

module AbsLogic where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )
import qualified Data.String

data Sequent = Seq [Form] Form [Step]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Step
    = StepPrem Form
    | StepFree Var
    | StepAssume Form
    | StepScope [Step]
    | StepForm Form [Arg]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ArgLit ArgId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Form
    = FormBot
    | FormEq Term Term
    | FormAll Var Form
    | FormSome Var Form
    | FormNot Form
    | FormAnd Form Form
    | FormOr Form Form
    | FormIf Form Form
    | FormPred Pred
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pred = PredN PredId [Term] | Pred0 PredId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Var = VarLit VarId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Fun = FunLit VarId [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = TermVar Var | TermFun Fun
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ArgId = ArgId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PredId = PredId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype VarId = VarId String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PIdent = PIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition PIdent where
  hasPosition (PIdent (p, _)) = C.Just p

