--Grammar for logic
Seq. Sequent ::= "if" [Form] "|-" Form ";" [Step];

StepPrem. Step ::= Form ":" "Prem" ";";
StepFree. Step ::= Var ":" "Assumed" ";"; 
StepAssume. Step ::= Form ":" "Assumed" ";";
StepScope. Step ::= "{" [Step] "}" ";";
StepForm. Step ::= Form ":" Ident "(" [ListArg] ")" ";";
terminator Step "" ;

ArgLit. Arg ::= ArgId;
separator Arg ",";

FormBot.  Form4  ::= "bot";
FormEq.   Form4  ::= Term "=" Term;

FormAll.  Form3 ::= "all" Var Form;
FormSome. Form3 ::= "some" Var Form;
FormNot.  Form3 ::= "!" Form;

FormAnd.  Form2 ::= Form "&" Form;
FormOr.   Form2 ::= Form "|" Form;

FormIf.   Form1 ::= Form "->" Form;

FormPred. Form ::= Pred;
coercions Form 4;
separator Form ",";

PredN. Pred ::= PredId "(" [Term] ")";
Pred0. Pred ::= PredId;

VarLit. Var ::= VarId;
FunLit. Fun ::= VarId "(" [Term] ")";

TermVar.   Term ::= Var;
TermFun.   Term ::= Fun;
separator Term ",";

token ArgId  digit digit*;
token PredId (upper (letter | digit | '_' )*);
token VarId  (lower (letter | digit | '_' )*);
token Ident  (upper (letter | digit | '_' )*);

comment "#" ;